# Function to simulate typewriter effect
function Typewriter {
    param (
        [string]$Message
    )
    $delay = 5 # in milliseconds
    foreach ($char in $Message.ToCharArray()) {
        Write-Host -NoNewline $char
        Start-Sleep -Milliseconds $delay
    }
    Write-Host
}

# Print a message indicating the creation of a Docker network
Typewriter "Creating Docker network..."

# Remove the existing Docker network named 'mongodb-network' if it exists
docker network rm mongodb-network

# Create a new Docker network named 'mongodb-network'
docker network create mongodb-network

# Confirm that the Docker network has been successfully created
Typewriter "Docker network was successfully created"
Write-Host

# Print a message indicating the start of MongoDB sharded cluster configuration
Typewriter "Configuring MongoDB Sharded Clusters with Replica Sets"

# Configure Shard 1 using the Docker Compose file for shard1
Typewriter "Starting Shard 1 (mongo-shard1)..."
docker-compose -f shard1/docker-compose.yaml up -d

# Configure Shard 2 using the Docker Compose file for shard2
Typewriter "Starting Shard 2 (mongo-shard2)..."
docker-compose -f shard2/docker-compose.yaml up -d
Write-Host

# Checking connectivity with improved readability and error handling
Typewriter "Checking connectivity..."

function Check-Connectivity {
    param (
        [string]$Container,
        [int]$Port
    )
    $maxRetries = 3
    $count = 0

    while ($count -lt $maxRetries) {
        $output = docker exec $Container mongosh --port $Port --eval "db.runCommand({ ping: 1 })" --quiet
        if ($output -match 'ok: 1') {
            Write-Host "$Container is up and running."
            return
        } else {
            Write-Host "Attempt $($count + 1) to reach $Container failed."
            $count++
            Start-Sleep -Seconds 1
        }
    }

    Write-Host "$Container is not reachable or not running after $maxRetries attempts."
    exit 1
}

# Check connectivity for Shard 1
Check-Connectivity "mongo-shard1-1" 27017
Check-Connectivity "mongo-shard1-2" 27017
Check-Connectivity "mongo-shard1-3" 27017

# Check connectivity for Shard 2
Check-Connectivity "mongo-shard2-1" 27017
Check-Connectivity "mongo-shard2-2" 27017
Check-Connectivity "mongo-shard2-3" 27017

Typewriter "All MongoDB instances are reachable and running."
Write-Host

# Initialize the replica set for Shard 1
Typewriter "Initializing the Replica Sets..."
Typewriter "Replica Set 1 (mongo-shard1-rs)"

docker exec mongo-shard1-1 mongosh --eval "rs.initiate({
  _id: 'mongo-shard1-rs',
  members: [
    {_id: 0, host: 'mongo-shard1-1:27017'},
    {_id: 1, host: 'mongo-shard1-2:27017'},
    {_id: 2, host: 'mongo-shard1-3:27017'}
  ]
})"
Write-Host

# Initialize the replica set for Shard 2
Typewriter "Replica Set 2 (mongo-shard2-rs)"

docker exec mongo-shard2-1 mongosh --eval "rs.initiate({
  _id: 'mongo-shard2-rs',
  members: [
    {_id: 0, host: 'mongo-shard2-1:27017'},
    {_id: 1, host: 'mongo-shard2-2:27017'},
    {_id: 2, host: 'mongo-shard2-3:27017'}
  ]
})"
Write-Host

# Set up the Config server replica set
Typewriter "Setting up Config Server Replica Set..."
docker-compose -f config/docker-compose.yaml up -d
Write-Host

# Check connectivity for Config Servers
Typewriter "Checking connectivity..."
Check-Connectivity "mongo-config-server-1" 27017
Check-Connectivity "mongo-config-server-2" 27017
Check-Connectivity "mongo-config-server-3" 27017

Typewriter "All MongoDB instances are reachable and running."
Write-Host

# Initialize the replica set for the Config server
Typewriter "Initializing the Config Server Replica Set..."
docker exec -it mongo-config-server-1 mongosh --port 27017 --eval "rs.initiate({
 _id: 'mongo-config-server-rs',
 members: [
   {_id: 0, host: 'mongo-config-server-1'},
   {_id: 1, host: 'mongo-config-server-2'},
   {_id: 2, host: 'mongo-config-server-3'}
 ]
})"
Write-Host
